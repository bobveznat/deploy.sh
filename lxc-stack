#!/bin/bash

#
# template script for generating ubuntu/maverick openstack container for LXC
#
# This script is based on lxc-maverick (Wilhelm Meier <wilhelm.meier@fh-kl.de>)
#

# Copyright © 2011 Jesse Andrews
# Author: Jesse Andrews <anotherjesse@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

if [ -r /etc/default/lxc ]; then
	. /etc/default/lxc
fi

configure_ubuntu()
{
    rootfs=$1
    hostname=$2

   # configure the network using the dhcp
    cat <<EOF > $rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

    sed -i "s/<hostname>/$hostname/" $rootfs/etc/dhcp3/dhclient.conf

    # set the hostname
    cat <<EOF > $rootfs/etc/hostname
$hostname
EOF
    # set minimal hosts
    cat <<EOF > $rootfs/etc/hosts
127.0.0.1 localhost $hostname
EOF

    # suppress log level output for udev
    sed -i "s/=\"err\"/=0/" $rootfs/etc/udev/udev.conf

    # tweak consoles
    rm -f $rootfs/etc/init/tty{5,6}.conf
    cp $rootfs/etc/init/tty1.conf $rootfs/etc/init/console.conf
    sed -i 's/tty1/\/dev\/console/' $rootfs/etc/init/console.conf

    # don't let upstart mount anything from its builtin fs
    echo "#Emptied out by lxc-maverick template"  > $rootfs/lib/init/fstab

    echo "Please change root-password !"
    echo "root:root" | chroot $rootfs chpasswd

    return 0
}

download_ubuntu()
{
    packages=dialog,apt,apt-utils,resolvconf,iproute,inetutils-ping,vim,dhcp3-client,ssh,lsb-release,gnupg,netbase,bzr,apt,apt-utils,binutils,bridge-utils,byobu,ca-certificates,cloud-utils,cpp,cpp-4.4,cpu-checker,cron,curl,dhcp3-client,dhcp3-common,dialog,dmsetup,dnsmasq-base,ebtables,erlang-base,erlang-crypto,erlang-mnesia,erlang-os-mon,erlang-public-key,erlang-runtime-tools,erlang-snmp,erlang-ssl,erlang-syntax-tools,euca2ools,file,gawk,gcc,gcc-4.4,gcc-4.4-base,gettext-base,git,git-core,gnupg,gpgv,inetutils-ping,iproute,iptables,iso-codes,kpartx,kvm,less,libaio1,libapparmor1,libasound2,libavahi-client3,libavahi-common-data,libavahi-common3,libbsd0,libc-dev-bin,libc6-dev,libcap-ng0,libcurl3,libcurl3-gnutls,libdevmapper1.02.1,libdigest-sha1-perl,libedit2,liberror-perl,libexpat1,libflac8,libfribidi0,libfuse2,libgcrypt11,libgdbm3,libgmp3c2,libgnutls26,libgomp1,libgpg-error0,libgpm2,libgssapi-krb5-2,libice6,libidn11,libjs-jquery,libk5crypto3,libkeyutils1,libkrb5-3,libkrb5support0,libldap-2.4-2,libmagic1,libmpfr4,libnewt0.52,libnl1,libogg0,libparted0debian1,libpciaccess0,libpopt0,libpulse0,libpython2.6,libreadline5,libreadline6,libsasl2-2,libsasl2-modules,libsctp1,libsdl1.2debian,libsdl1.2debian-alsa,libsm6,libsndfile1,libsqlite3-0,libssl-dev,libstdc++6,libtasn1-3,libvirt-bin,libvirt0,libvorbis0a,libvorbisenc2,libwrap0,libx11-6,libx11-data,libx11-xcb1,libxau6,libxcb-atom1,libxcb1,libxdmcp6,libxen3,libxext6,libxi6,libxml2,libxml2-utils,libxslt1.1,libxtst6,libyaml-0-2,linux-libc-dev,lksctp-tools,logrotate,make,manpages,manpages-dev,mime-support,netcat-openbsd,openssh-client,openssh-server,openssl,patch,perl,perl-modules,psmisc,python,python-amqplib,python-anyjson,python-apt,python-argparse,python-boto,python-carrot,python-central,python-cheetah,python-cjson,python-crypto,python-daemon,python-decorator,python-dev,python-dingus,python-eventlet,python-formencode,python-gflags,python-gnupginterface,python-greenlet,python-httplib2,python-ipy,python-libvirt,python-libxml2,python-lockfile,python-lxml,python-m2crypto,python-migrate,python-mox,python-netaddr,python-newt,python-nose,python-openid,python-openssl,python-pam,python-paramiko,python-paste,python-pastedeploy,python-pastescript,python-pkg-resources,python-prettytable,python-pyasn1,python-pysqlite2,python-routes,python-scgi,python-serial,python-setuptools,python-software-properties,python-sqlalchemy,python-sqlalchemy-ext,python-stompy,python-support,python-tempita,python-webob,python-yaml,python-zope.interface,python2.6,python2.6-dev,qemu-common,qemu-kvm,readline-common,resolvconf,rsync,screen,seabios,sgml-base,socat,sqlite3,ssh,sudo,ucf,uml-utilities,unattended-upgrades,unzip,vgabios,vim,vim-common,vim-runtime,vlan,wget,x11-common,xml-core,zlib1g-dev
    cache=$1
    arch=$2

    # check the mini ubuntu was not already downloaded
    mkdir -p "$cache/partial-$arch"
    if [ $? -ne 0 ]; then
	echo "Failed to create '$cache/partial-$arch' directory"
	return 1
    fi

    # download a mini ubuntu into a cache
    echo "Downloading ubuntu maverick minimal ..."
    debootstrap --verbose --variant=minbase --components=main,universe --arch=$arch --include=$packages maverick $cache/partial-$arch $MIRROR
    if [ $? -ne 0 ]; then
	echo "Failed to download the rootfs, aborting."
	return 1
    fi

    mv "$1/partial-$arch" "$1/rootfs-$arch"
    echo "Download complete."

    return 0
}

copy_ubuntu()
{
    cache=$1
    arch=$2
    rootfs=$3

    # make a local copy of the miniubuntu
    echo -n "Copying rootfs to $rootfs ..."
    cp -a $cache/rootfs-$arch $rootfs || return 1
    return 0
}

install_ubuntu()
{
    cache="/var/cache/lxc/stack"
    rootfs=$1
    mkdir -p /var/lock/subsys/
    (
	flock -n -x 200
	if [ $? -ne 0 ]; then
	    echo "Cache repository is busy."
	    return 1
	fi

	arch=$(arch)
	if [ "$arch" == "x86_64" ]; then
	    arch=amd64
	fi

	if [ "$arch" == "i686" ]; then
	    arch=i386
	fi

	echo "Checking cache download in $cache/rootfs-$arch ... "
	if [ ! -e "$cache/rootfs-$arch" ]; then
	    download_ubuntu $cache $arch
	    if [ $? -ne 0 ]; then
		echo "Failed to download 'ubuntu maverick base'"
		return 1
	    fi
	fi

	echo "Copy $cache/rootfs-$arch to $rootfs ... "
	copy_ubuntu $cache $arch $rootfs
	if [ $? -ne 0 ]; then
	    echo "Failed to copy rootfs"
	    return 1
	fi

	return 0

	) 200>/var/lock/subsys/lxc

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    cat <<EOF >> $path/config
lxc.utsname = $name

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.mount  = $path/fstab

lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
#lxc.cgroup.devices.allow = c 4:0 rwm
#lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOF

    cat <<EOF > $path/fstab
proc            $rootfs/proc         proc    nodev,noexec,nosuid 0 0
devpts          $rootfs/dev/pts      devpts defaults 0 0
sysfs           $rootfs/sys          sysfs defaults  0 0
EOF

    if [ $? -ne 0 ]; then
	echo "Failed to add configuration"
	return 1
    fi

    return 0
}

clean()
{
    cache="/var/cache/lxc/stack"

    if [ ! -e $cache ]; then
	exit 0
    fi

    # lock, so we won't purge while someone is creating a repository
    (
	flock -n -x 200
	if [ $? != 0 ]; then
	    echo "Cache repository is busy."
	    exit 1
	fi

	echo -n "Purging the download cache..."
	rm --preserve-root --one-file-system -rf $cache && echo "Done." || exit 1
	exit 0

    ) 200>/var/lock/subsys/lxc
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> --clean
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
	-h|--help)      usage $0 && exit 0;;
	-p|--path)      path=$2; shift 2;;
	-n|--name)      name=$2; shift 2;;
	-c|--clean)     clean=$2; shift 2;;
	--)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
    clean || exit 1
    exit 0
fi

type debootstrap
if [ $? -ne 0 ]; then
    echo "'debootstrap' command is missing"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

install_ubuntu $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install openstack ubuntu maverick"
    exit 1
fi

configure_ubuntu $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure openstack ubuntu maverick for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

if [ ! -z $clean ]; then
    clean || exit 1
    exit 0
fi
